// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AuthLoginData, AuthLoginResponses, AuthCallbackData, AuthCallbackResponses, AuthLogoutData, AuthLogoutResponses, AuthGetMeData, AuthGetMeResponses, ChatAllData, ChatAllResponses, ChatCreateData, ChatCreateResponses, ChatCreateErrors, ChatByIdData, ChatByIdResponses, ChatByIdErrors, ChatExtendData, ChatExtendResponses, ChatExtendErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const authLogin = <ThrowOnError extends boolean = false>(options?: Options<AuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthLoginResponses, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options
    });
};

/**
 * Auth Callback
 * Handle OAuth callback - expects auth code from frontend
 */
export const authCallback = <ThrowOnError extends boolean = false>(options?: Options<AuthCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthCallbackResponses, unknown, ThrowOnError>({
        url: '/auth/callback',
        ...options
    });
};

/**
 * Logout
 */
export const authLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthLogoutResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get Me
 */
export const authGetMe = <ThrowOnError extends boolean = false>(options?: Options<AuthGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthGetMeResponses, unknown, ThrowOnError>({
        url: '/auth/me',
        ...options
    });
};

/**
 * Get Chats
 * Get list of chats (id and title only) for the current user
 */
export const chatAll = <ThrowOnError extends boolean = false>(options?: Options<ChatAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChatAllResponses, unknown, ThrowOnError>({
        url: '/chats',
        ...options
    });
};

/**
 * Create Chat And Stream
 * Create a new chat and stream the response
 */
export const chatCreate = <ThrowOnError extends boolean = false>(options: Options<ChatCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChatCreateResponses, ChatCreateErrors, ThrowOnError>({
        url: '/chats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Chat With Messages
 * Get a specific chat and all of its messages
 */
export const chatById = <ThrowOnError extends boolean = false>(options: Options<ChatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChatByIdResponses, ChatByIdErrors, ThrowOnError>({
        url: '/chats/{chat_id}',
        ...options
    });
};

/**
 * Add To Chat And Stream
 * Add a message to an existing chat and stream the response
 */
export const chatExtend = <ThrowOnError extends boolean = false>(options: Options<ChatExtendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChatExtendResponses, ChatExtendErrors, ThrowOnError>({
        url: '/chats/{chat_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};